#!/usr/bin/perl

use Text::BibTeX;


##### The URLs below are relative to where the HTML pages will be
##### finally setup (not used during execution of bibTOhtml). $destdir
##### tells bibTOhtml where to put the .html files relative to the current path
$style = "/style.css"; # URL of a style sheet to be included
$picdir = "/i";        # URL of where the images and icons are
$verbose = 0;          # show file open/close info during parsing
#$bibmaster = "src/ilab.bib";   # URL of master bibtexfile
$destdir = '/home/httpd/html/jtrack/01'; # PATH where to write HTML

##### You Lab's Information & your Copyright:
$title = "iLab Publications - University of Southern California";
$copy = "Copyright &copy; 2000 by the University of Southern California, ".
    "iLab and Prof. Laurent Itti.";

##### Colors:
$bgcol = "#CCF0FF"; # color for page background
$ticol = 'navy';    # color for titles
$jocol = 'red';     # color for journal names
$dacol = '#EE6600'; # color for year
$xxcol = 'blue';    # for the words: Abstract, Note, Keywords

##### Images and Icons:
$bannerPic = $picdir."/ilab5.gif"; # a banner at top of page (or comment out)
$titlePic = $picdir."/publi1.gif"; # a title just below banner (or comment out)
$ICONps = $picdir."/ICONps.gif";
$ICONpdf = $picdir."/ICONpdf.gif";
$ICONhtml = $picdir."/ICONhtml.gif";
$ICONabs = $picdir."/ICONabs.gif";
$ICONblank = $picdir."/ICONblank.gif";
$ICONbib = $picdir."/ICONbib.gif";

##### The real BibTeX entry types plus a couple of fake ones:
%types = ( 'article' => 'Journal Articles',
	   'incollection' => 'Book Chapters',
	   'inproceedings' => 'Proceedings from International Conferences',
	   'book' => 'Books',
	   'phdthesis' => 'Ph.D. Theses',
	   'mastersthesis' => 'Master Theses',
	   'techreport' => 'Technical Reports',
	   'booklet' => 'Booklets',
	   'manual' => 'Technical Documentations',
	   'proceedings' => 'Edited Conference Proceedings',
	   'unpublished' => 'Unpublished Documents',
	   'patent' => 'Patents and Copyrights',

	   'submitted' => 'Publications Submitted to Review',
	   'in-press' => 'Publications in Press',
	   'all' => 'All Publications',
	   );
@origtypes = keys(%types); $toda = `date`;
$types{'index'} = 'Welcome to the iLab Publication Server!';

##### The thematic categories: They should be stored in a "theme" BibTeX tag,
##### separated by | if there are several:
$types{'bu'} = 'Model of Bottom-Up Saliency-Based Visual Attention';
$types{'td'} = 'Model of Top-Down Attentional Modulation';
$types{'psy'} = 'Human Psychophysics';
$types{'mod'} = 'Computational Modeling';
$types{'mip'} = 'Medical Image Processing';
$types{'fmri'} = 'Functional Neuroimaging';
$types{'med'} = 'Medical Research';
$types{'cv'} = 'Computer Vision';

##############################################################################
##### This starts gettign messy and should not be modified:
##############################################################################
%info = ( 'phdthesis' => 'Ph.D. Thesis',
	  'mastersthesis' => 'Master Thesis',
	  'techreport' => 'Technical Report',
	  'manual' => 'Technical Documentation',
	  'unpublished' => 'Unpublished',
	  'patent' => 'Patent/Copyright'
      );
$HTMLstart = "<HTML><HEAD><LINK rel=\"stylesheet\" href=\"$style\">".
    "<TITLE>$title</TITLE><META HTTP-EQUIV=\"Pragma\" CONTENT=\"no-cache\"></HEAD><BODY BGCOLOR=\"$bgcol\">\n";
if ($bannerPic) {
    $HTMLstart .= "<P><CENTER><IMG SRC=\"$bannerPic\"></IMG></CENTER></P>\n";
}
if ($titlePic) {
    $HTMLstart .= "<P><CENTER><IMG SRC=\"$titlePic\"></IMG></CENTER></P>\n";
}

$HTMLend = "<P> &nbsp; </P><CENTER><P class=\"sm\">$copy<BR>".
    "This page generated by <A HREF=\"http://iLab.usc.edu/bibTOhtml/\">".
    "bibTOhtml</A> on $toda</P></CENTER></BODY></HTML>\n";

$HTMLicons = "<HR><P><CENTER>".
    "<IMG SRC=\"$ICONhtml\" BORDER=0></IMG> = HTML Version, &nbsp; &nbsp; ".
    "<IMG SRC=\"$ICONps\" BORDER=0></IMG> = PostScript Version</CENTER></P>".
    "<P><CENTER>".
    "<IMG SRC=\"$ICONpdf\" BORDER=0></IMG> = PDF Version, &nbsp; &nbsp; ".
    "<IMG SRC=\"$ICONabs\" BORDER=0></IMG> = Online Abstract.</CENTER>".
    "</P><HR>";


##############################################################################
$bibname = shift || die "USAGE: $0 <bibfile.bib>\n";
$nps = 0; $nhtm = 0; $npdf = 0; $nabs = 0; $nb = 0;

##### start parsing the bibtex file:
$bibfile = new Text::BibTeX::File $bibname;
while ($entry = new Text::BibTeX::Entry $bibfile)
{
    next unless $entry->parse_ok;
    next unless $entry->metatype eq BTE_REGULAR;

    ##### parse entry:
    $type = $entry->type; $ye = $entry->get('year');
    $ye = lc($ye); if ($ye =~ /^\d+$/ && $ye < 100) { $ye += 1900; }
    $key = $entry->key; $au = join(', ', $entry->split('author'));
    $ti = $entry->get('title'); $jo = $entry->get('journal');
    if (substr($ti, -1) eq '.') { $ti = substr($ti, 0, length($ti)-1); }
    $vo = $entry->get('volume');    $nu = $entry->get('number');
    $mo = $entry->get('month');     $pp = $entry->get('pages');
    $se = $entry->get('series');    $pu = $entry->get('publisher');
    $bt = $entry->get('booktitle');
    $ed = join(', ', $entry->split('editor'));
    $ad = $entry->get('address');   $or = $entry->get('organization');
    $in = $info{$type};

    print STDERR "$key, $jo$bt, $ye [$type]\n";
    ##### format and colorize the various fields:
    if ($au) { $au = "$au, "; }
    if ($ti) { $ti = "<FONT COLOR=\"$ticol\">$ti,</FONT> "; }
    if ($jo) { $jo = "<FONT COLOR=\"$jocol\"><I>$jo,</I></FONT> ";}
    if ($vo) { $vo = "Vol. <B>$vo</B>, "; }
    if ($nu) { $nu = "No. $nu, "; }
    if ($ye) { $dat = "<FONT COLOR=\"$dacol\">$mo $ye.</FONT>"; }
    if ($pp) { $pp = "pp. $pp, "; }
    if ($se) { $se = "[$se], "; }
    if ($pu) { $pu = "$pu, "; }
    if ($bt) { $bt = "<FONT COLOR=\"$jocol\"><B>In: </B><I>$bt,</I></FONT> "; }
    if ($ed) { $ed = " ($ed <B>Ed.</B>), "; }
    if ($ad && $pu) { $ad = "$ad:$pu"; $pu = ""; } else { $ad = ""; }
    if ($or) { $or = "$or, "; }
    if ($in) { $in = " <B>[$in]</B>"; }

    ##### Build html representation of entry:
    $ref = "$au<BR>$ti<BR>$jo$vo$nu$bt$ed$or$pp$pu$ad$dat$in";

    ##### stop here if we have no entry
    next unless $ref;

    ##### if we have an HTML version, add it:
    if ($entry->exists('url') && length($entry->get('url')) > 3) {
	$txt = icon($ICONhtml, $entry->get('url')); $nhtm ++;
    } else {
	$txt = icon($ICONblank);
    }

    ##### if we have a PS version, add it:
    if ($entry->exists('psurl') && length($entry->get('psurl')) > 3) {
	$txt .= icon($ICONps, $entry->get('psurl')); $nps ++;
    } else {
	$txt .= icon($ICONblank);
    }

    ##### if we have a PDF version, add it:
    if ($entry->exists('pdfurl') && length($entry->get('pdfurl')) > 3) {
	$txt .= icon($ICONpdf, $entry->get('pdfurl')); $npdf ++;
    } else {
	$txt .= icon($ICONblank);
    }

    ##### if we have an abstract, add a link and create a page with it:
    if ($entry->exists('abstract') && length($entry->get('abstract')) > 3) {
	$fname = "$key.html"; $txt .= icon($ICONabs, $fname);
	$abs = $entry->get('abstract'); $nabs ++;
	$abs =~ s/\\+//g;  # cleanup bogus \'s that remain...
	if ($entry->exists('keyword') && length($entry->get('keyword')) > 3) {
	    $kk = $entry->get('keyword');
	    $kw = "<P class=\"BIBkw\"><FONT COLOR=\"$xxcol\"><B>Keywords:".
		" </B></FONT>".join("; ", split(/\|/, $kk))."</P>\n";
	} else { $kw = ""; }
	if ($entry->exists('note') && length($entry->get('note')) > 3) {
	    $note = "<P class=\"BIBkw\"><FONT COLOR=\"$xxcol\"><B>Note: </B>".
		"</FONT>".($entry->get('note'))."</P>\n";
	} else { $note = ""; }
	out($key, "<P class=\"BIBent\">$txt $ref</P>\n<P class=\"BIBabs\">".
	    "<FONT COLOR=\"$xxcol\"><B>Abstract: </B></FONT> $abs</P>\n".
	    "$kw$note");
	# close this one right away so that we don't have too many open files
	closeout($key);
    } else {
	$txt .= icon($ICONblank);
    }

    ##### concatenate entire citation:
    $bname = "$key.bib"; $brec = icon($ICONbib, $bname);
    $txt = "<P class=\"BIBent\">$txt $ref $brec</P>\n"; $nb ++;
    open BRE, ">$destdir/$bname" || die "Cannot write $bname: ";
    print BRE $entry->print_s; close BRE;

    ##### write this entry to corresponding files:
    if ($ye =~ /submi/) { $ye = 'submitted'; }
    elsif ($ye =~ /press/) { $ye = 'in-press'; }
    out($type, $txt);  # put in file for that type category
    out($ye, $txt);    # write in file for that year
    if ($entry->exists('theme')) {
	$th = $entry->get('theme');
	$th =~ s/\s+/ /g; $th =~ s/\s*\|\s*/\|/g;
	@the = split(/\|/, $th);
	foreach $them (@the) {
	    $themes{$them} = 1;
	    out($them, $txt);   # add this entry to each theme it covers
	}
    }
    out('all', $txt);  # write this entry to the 'all publis' page
    $entry->set('keyword', ""); # avoid bogus xfer of keyword across entries
}

##### ok, now we can compile the general index:
if ($out{'in-press'}) { push @years, 'in-press'; }
if ($out{'submitted'}) { push @years, 'submitted'; }

out('index', "<P><B>$nb publications</B>, $nabs with abstract, ".
    "$npdf available as PDF, $nps as PostScript and $nhtm as HTML.</P>\n");

out('index', '<H1>Publications by Year</H1><P>');
foreach $y (reverse sort @years) {
    out('index', "<A HREF=\"$y.html\">$y</A> &nbsp; &nbsp; &nbsp; &nbsp; ");
}
out('index', '</P><H1>Publications by Type</H1><UL>');
foreach $y (sort @origtypes) {
    next unless $out{$y};
    $tt = $types{$y}; $tt =~ s/\s+/\&nbsp;/g;
    out('index', "<LI><A HREF=\"$y.html\">$tt</A></LI>\n");
}
out('index', '</UL></P><H1>Publications by Theme</H1><UL>');
foreach $y (sort keys %themes) {
    next unless $out{$y};
    out('index', "<LI><A HREF=\"$y.html\">$types{$y}</A></LI>");
}
#out('index', "</UL></P><H1>Master BibTeX File</H1><P>The master BibTeX ".
#    "file used to create these pages can be found <A HREF=\"$bibmaster\">".
#    "here</A>.</P>");

closeouts();
exit(0);

##############################################################################
##############################################################################
sub openout {  # name
    my $k = $_[0];
    local *FH; open FH, ">$destdir/$k.html" || die "Cannot write $k.html: ";
    if ($verbose) { print STDERR "##### Creating $k.html\n"; }
    $out{$k} = *FH; print FH $HTMLstart;
    if ($k =~ /^\d+$/) {   # this file is a list by year
	push @years, $k;
	print FH "<H1>Publications for Year $k</H1>\n";
    }  else {              # this file is a list by category
	if ($types{$k}) {  # this is a real category
	    print FH "<H1>$types{$k}</H1>\n";
	} else {           # it's an abstract
	    print FH "<H1>Abstract</H1>\n";
	}
    }
    print FH "$HTMLicons\n";
}

##############################################################################
sub out {
    my ($k, $txt) = @_;
    if (! defined($out{$k})) { openout($k); }
    local *F = $out{$k}; print F $txt;
}

##############################################################################
sub closeouts {
    foreach $k (keys %out) {
	local *FH = $out{$k};
	print FH "\n$HTMLend\n";
	if ($verbose) { print STDERR "##### Closing $k.html\n"; }
	close FH;
    }
}

##############################################################################
sub closeout {
    if ($out{$_[0]}) {
	local *FH = $out{$_[0]};
	print FH "\n$HTMLend\n";
	if ($verbose) { print STDERR "##### Closing $_[0].html\n"; }
	close FH; delete $out{$_[0]};
    }
}

##############################################################################
sub icon {
    if ($_[1]) {
	my ($i, $u) = @_;
	return "<A HREF=\"$u\"><IMG SRC=\"$i\" BORDER=0></IMG></A> ";
    } else {
	return "<IMG SRC=\"$_[0]\" BORDER=0></IMG> ";
    }
}
